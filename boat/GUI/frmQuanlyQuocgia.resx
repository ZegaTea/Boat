<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMacORLzlR9B9JYiRO+X
        ICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/4AAAr6kQZVWwIT+vqRD//OW
        If/zliH/6pcntpuuVykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPOVIZGbrVj/SsOL/0/C
        iP/rmCb/85Yh/72lQ/9jvXz4kq1kHAAAAAAAAAAAAAAAAAAAAAAAAAAASko1GIxlMGrzliH+cblz/1DB
        h/+9pUP/8pYi/9edM/93t2//SsOL/3WfX9FOSDcuAAAAAAAAAAAAAAAAAAAAAE9HN9lPRzf/na1W/8yg
        Of/omSj/85Yh/96cLv9Kw4v/SsOL/0rDi/9UbU7+T0c3/k5INy4AAAAAAAAAAAAAAABPRzf/T0c3/2W8
        ev+LsmP/85Yh//OWIf/zliH/d7dv/0rDi/9Kw4v/T3BT/09HN/9OSDZVAAAAAAAAAAAAAAAAUkU6+09H
        N/9Kw4v/SsOL/3e3b//PoDf/85Yh/8aiPf9Lw4r/SsOL/1VuT/1PRzf/T0g2RwAAAAAAAAAAAAAAAIY1
        cMJaVDzPS8OK/4O0Z/+CtGj/y6E6//OWIf/zliH/na1W/0rDi/9meU7idDpd11VVVQMAAAAAAAAAAAAA
        AACwJ5uKsSucJIC1adFgvXz/qqlP/+KbLP99tWr/4pss/7emRv9hvXz5n6dYILAom64AAAAAAAAAAAAA
        AAAAAAAAryacQ68nnHb/gAACwaRAlMOjPvnsmCb/Xb6A/3q2bf/0liGz0KE5G7MpnyWwJ5yVAAAAAAAA
        AAAAAAAAAAAAAP8A/wGwJ5yyrSmcHwAAAADtkiQO1pwzS6OqU2mzqEcvAAAAAIAAgAKwKJuusiebIQAA
        AAAAAAAAAAAAAAAAAAAAAAAAsCOeHbAnnbiuKJomAAAAAAAAAAAAAAAAAAAAALMzmQqwJ5ybsCebVAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACuI5cWsCicmq8mnKCxJ5xisCicWrEnnImwJ5yvsSecOwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzJpkUsCaeRLAmnkSwJJ4qAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA+B8AAPAPAADwBwAAwAMAAMADAADAAwAAwAMAANAL
        AAD4GwAA7/cAAPfvAAD5nwAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAL6lREfzliB+9JYgnvOWIarzlSGT85Yha/WTHRoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//8AAaumTnZnu3n3UcGH/9SeNP/zliH/85Yh//OWIf/zliH/85Yh/fOW
        IK3zlR8pAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+SJAfyliGgm65Y/0rDi/9Kw4v/Xr5//9SeNP/zliH/85Yh//OW
        If/zliH/85Yh/9OeNfiAtGmcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/mTMF85YivvOWIf9ru3b/SsOL/0rDi/9Kw4v/Wb+B/++X
        I//zliH/85Yh//OWIf/zliH/o6xT/0rDi/+GtGerAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPKXII7zliH/y6E6/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v/0J83//OWIf/zliH/85Yh//OWIf9runb/SsOL/0vCiv+PsmBtAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADymSAo85Yh+vOWIf+kq1L/SsOL/0rD
        i/9Kw4v/abt4/6SrUv/tmCX/85Yh//OWIf/zliH/4pos/0vDiv9Kw4v/SsOL/1+9fveAv4AEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPRjdUT0c3oXhaMuLzliH/85Yh/4+w
        X/9Kw4v/SsOL/2S8e//xliP/85Yh//OWIf/yliL/xaI+/7CoTP9wuXP/SsOL/0rDi/9Kw4v/S6h4/11c
        P9ZPRjeRT0k3KgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT0Y4e09HN/9PRzf/T0c3/9Se
        Nf+NsWH/sKhM/8aiPf/Iojz/7Zck//OWIf/zliH/85Yh/76kQ/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Lmm//T0c3/09HN/9PRzf3TUc1KwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPRzfnT0c3/09H
        N/9PRzf/Yb19/7mlRv/cnC//5Zop//OWIf/zliH/85Yh//OWIf/zliH/0p42/0vDiv9Kw4v/SsOL/0rD
        i/9Kw4v/SsOL/0uab/9PRzf/T0c3/09HN/9QRzeQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9H
        N/9PRzf/T0c3/09HN/9RwYb/t6ZG/361av/NoDn/85Yh//OWIf/zliH/85Yh//OWIf/zliH/grRo/0rD
        i/9Kw4v/SsOL/0rDi/9Kw4v/S5pv/09HN/9PRzf/T0c3/1BHOKoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAT0c3/09HN/9PRzf/T0c3/0rDi/9Kw4v/SsOL/52tVv/zliH/85Yh//OWIf/zliH/85Yh//OW
        If/KoTv/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Lmm//T0c3/09HN/9PRzf/UEc4qgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABORjf+T0c3/09HN/9PRzf/SsOL/0rDi/9Kw4v/S8OK/4ezZf+2pkf/75cj//OW
        If/zliH/85Yh/+2YJf9pu3f/SsOL/0rDi/9Kw4v/SsOL/0uab/9PRzf/T0c3/09HN/9PRzeoAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVEP+BPRzf/T0c3/09HN/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9tunb/8pci//OWIf/zliH/85Yh/8+gN/9Mw4n/SsOL/0rDi/9Kw4v/S5pv/09HN/9PRzf/T0c3/05I
        N3kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgThqf1ZFPf9PRzf/T0c3/0rDi/9Kw4v/TMOJ/4my
        ZP9Pwoj/SsOL/2K9fP/yliL/85Yh//OWIf/zliH/85Yh/72lQ/9Pwoj/SsOL/0rDi/9Lmm//T0c3/09H
        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
        /n//H/z//8/x///gB////j//////////////////
</value>
  </data>
</root>